<?xml version="1.0"?>
<component-set>
    <components>

        <!-- JAR packaging, with repackaging into a JAR of JARs-->
        <component>
            <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>
            <role-hint>jar</role-hint>
            <implementation>
                org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping
            </implementation>
            <configuration>
                <lifecycles>
                    <lifecycle>
                        <id>default</id>
                        <phases>
                            <generate-sources>
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-generic,
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-client,
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-server
                            </generate-sources>
                            <process-resources>
                                org.apache.maven.plugins:maven-resources-plugin:resources
                            </process-resources>
                            <compile>
                                org.apache.maven.plugins:maven-compiler-plugin:compile
                            </compile>
                            <process-test-resources>
                                org.apache.maven.plugins:maven-resources-plugin:testResources
                            </process-test-resources>
                            <test-compile>
                                org.apache.maven.plugins:maven-compiler-plugin:testCompile
                            </test-compile>
                            <test>
                                ${project.groupId}:${project.artifactId}:${project.version}:start-testresources-service,
                                org.apache.maven.plugins:maven-surefire-plugin:test
                            </test>
                            <prepare-package>
                                ${project.groupId}:${project.artifactId}:${project.version}:aot-analysis,
                                ${project.groupId}:${project.artifactId}:${project.version}:graalvm-resources
                            </prepare-package>
                            <package>
                                org.apache.maven.plugins:maven-jar-plugin:jar,
                                org.apache.maven.plugins:maven-shade-plugin:shade
                            </package>
                            <install>
                                org.apache.maven.plugins:maven-install-plugin:install
                            </install>
                            <deploy>
                                org.apache.maven.plugins:maven-deploy-plugin:deploy
                            </deploy>
                        </phases>
                    </lifecycle>
                </lifecycles>
            </configuration>
        </component>

        <!-- Native image packaging, using GraalVM Native Image Maven Plugin -->
        <component>
            <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>
            <role-hint>native-image</role-hint>
            <implementation>
                org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping
            </implementation>
            <configuration>
                <lifecycles>
                    <lifecycle>
                        <id>default</id>
                        <phases>
                            <generate-sources>
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-generic,
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-client,
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-server
                            </generate-sources>
                            <process-resources>
                                org.apache.maven.plugins:maven-resources-plugin:resources
                            </process-resources>
                            <compile>
                                org.apache.maven.plugins:maven-compiler-plugin:compile
                            </compile>
                            <prepare-package>
                                ${project.groupId}:${project.artifactId}:${project.version}:aot-analysis,
                                ${project.groupId}:${project.artifactId}:${project.version}:graalvm-resources,
                                org.apache.maven.plugins:maven-jar-plugin:jar
                            </prepare-package>
                            <package>
                                org.graalvm.buildtools:native-maven-plugin:compile-no-fork
                            </package>
                        </phases>
                    </lifecycle>
                </lifecycles>
            </configuration>
        </component>

        <!-- Docker packaging, using Jib -->
        <component>
            <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>
            <role-hint>docker</role-hint>
            <implementation>
                org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping
            </implementation>
            <configuration>
                <lifecycles>
                    <lifecycle>
                        <id>default</id>
                        <phases>
                            <generate-sources>
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-generic,
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-client,
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-server
                            </generate-sources>
                            <process-resources>
                                org.apache.maven.plugins:maven-resources-plugin:resources
                            </process-resources>
                            <compile>
                                org.apache.maven.plugins:maven-compiler-plugin:compile
                            </compile>
                            <prepare-package>
                                ${project.groupId}:${project.artifactId}:${project.version}:aot-analysis
                            </prepare-package>
                            <package>
                                ${project.groupId}:${project.artifactId}:${project.version}:docker,
                                com.google.cloud.tools:jib-maven-plugin:dockerBuild
                            </package>
                            <deploy>
                                ${project.groupId}:${project.artifactId}:${project.version}:docker-push
                            </deploy>
                        </phases>
                    </lifecycle>
                </lifecycles>
            </configuration>
        </component>

        <!-- Docker CRaC packaging, using Jib -->
        <component>
            <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>
            <role-hint>docker-crac</role-hint>
            <implementation>
                org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping
            </implementation>
            <configuration>
                <lifecycles>
                    <lifecycle>
                        <id>default</id>
                        <phases>
                            <generate-sources>
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-generic,
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-client,
                                ${project.groupId}:${project.artifactId}:${project.version}:generate-openapi-server
                            </generate-sources>
                            <process-resources>
                                org.apache.maven.plugins:maven-resources-plugin:resources
                            </process-resources>
                            <compile>
                                org.apache.maven.plugins:maven-compiler-plugin:compile
                            </compile>
                            <prepare-package>
                                ${project.groupId}:${project.artifactId}:${project.version}:aot-analysis
                            </prepare-package>
                            <package>
                                ${project.groupId}:${project.artifactId}:${project.version}:docker-crac
                            </package>
                            <deploy>
                                ${project.groupId}:${project.artifactId}:${project.version}:docker-push
                            </deploy>
                        </phases>
                    </lifecycle>
                </lifecycles>
            </configuration>
        </component>

        <!-- Docker packaging, with a Native Image inside -->
        <component>
            <role>org.apache.maven.lifecycle.mapping.LifecycleMapping</role>
            <role-hint>docker-native</role-hint>
            <implementation>
                org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping
            </implementation>
            <configuration>
                <lifecycles>
                    <lifecycle>
                        <id>default</id>
                        <phases>
                            <generate-resources>
                                org.graalvm.buildtools:native-maven-plugin:add-reachability-metadata
                            </generate-resources>
                            <process-resources>
                                org.apache.maven.plugins:maven-resources-plugin:resources
                            </process-resources>
                            <compile>
                                org.apache.maven.plugins:maven-compiler-plugin:compile
                            </compile>
                            <prepare-package>
                                ${project.groupId}:${project.artifactId}:${project.version}:aot-analysis,
                                ${project.groupId}:${project.artifactId}:${project.version}:graalvm-resources,
                                org.graalvm.buildtools:native-maven-plugin:write-args-file
                            </prepare-package>
                            <package>
                                ${project.groupId}:${project.artifactId}:${project.version}:docker-native
                            </package>
                            <deploy>
                                ${project.groupId}:${project.artifactId}:${project.version}:docker-push
                            </deploy>
                        </phases>
                    </lifecycle>
                </lifecycles>
            </configuration>
        </component>

        <!-- Test resources lifecycle management -->
        <component>
            <role>org.apache.maven.AbstractMavenLifecycleParticipant</role>
            <role-hint>test-resources</role-hint>
            <implementation>io.micronaut.maven.testresources.TestResourcesLifecycleExtension</implementation>
            <description>Micronaut Test Resources Extension</description>
            <isolated-realm>false</isolated-realm>
        </component>

        <component>
            <role>com.fasterxml.jackson.core.ObjectCodec</role>
            <role-hint>object-mapper</role-hint>
            <implementation>com.fasterxml.jackson.dataformat.xml.XmlMapper</implementation>
        </component>
    </components>
</component-set>
