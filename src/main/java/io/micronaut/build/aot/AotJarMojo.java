/*
 * Copyright 2003-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.micronaut.build.aot;

import io.micronaut.build.services.CompilerService;
import io.micronaut.build.services.ExecutorService;
import org.apache.maven.archiver.MavenArchiveConfiguration;
import org.apache.maven.archiver.MavenArchiver;
import org.apache.maven.artifact.DependencyResolutionRequiredException;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.*;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.archiver.Archiver;
import org.codehaus.plexus.archiver.jar.JarArchiver;
import org.codehaus.plexus.archiver.jar.ManifestException;
import org.codehaus.plexus.archiver.util.DefaultArchivedFileSet;
import org.codehaus.plexus.archiver.util.DefaultFileSet;
import org.eclipse.aether.RepositorySystem;
import org.eclipse.aether.resolution.DependencyResolutionException;

import javax.inject.Inject;
import java.io.*;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Generates a jar optimized by Micronaut AOT, which is a jar corresponding to the regular application jar, except that
 * it contains some optimizations computed at build time. It may contain, for example, additional classes, or even have
 * different resources.
 */
@Mojo(name = AotJarMojo.NAME, defaultPhase = LifecyclePhase.PACKAGE, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)
public class AotJarMojo extends AbstractMicronautAotMojo {

    public static final String NAME = "aot-jar";

    /**
     * The filename (excluding the extension, and with no path information) that the produced artifact will be called.
     */
    @Parameter( defaultValue = "${project.build.finalName}", readonly = true )
    private String finalName;

    /**
     * The Jar archiver.
     */
    @Component
    private Map<String, Archiver> archivers;

    private final ExecutorService executorService;

    @Inject
    @SuppressWarnings("CdiInjectionPointsInspection")
    public AotJarMojo(CompilerService compilerService, ExecutorService executorService, MavenProject mavenProject,
                      MavenSession mavenSession, RepositorySystem repositorySystem) {
        super(compilerService, mavenProject, mavenSession, repositorySystem);
        this.executorService = executorService;
    }

    @Override
    protected void doExecute() throws DependencyResolutionException, MojoExecutionException {
//        executorService.executeGoal("io.micronaut.build:micronaut-maven-plugin", "aot-analysis");
        MavenArchiver archiver = new MavenArchiver();;
        try {
            configureAotJar(archiver);
            archiver.createArchive(mavenSession, mavenProject, new MavenArchiveConfiguration());
        } catch (ManifestException | IOException | DependencyResolutionRequiredException e) {
            throw new MojoExecutionException("Unable to package AOT jar", e);
        }
    }

    @Override
    String getName() {
        return NAME;
    }

    private void configureAotJar(MavenArchiver archiver) throws MojoExecutionException {
        Archiver jarArchiver = archivers.get("jar");
        jarArchiver.addFileSet(new DefaultFileSet(outputFile("generated/classes")));
        File unmodifiedJar = mavenProject.getArtifact().getFile();
        DefaultArchivedFileSet archivedFileSet = new DefaultArchivedFileSet(unmodifiedJar);
        configureExcludes(archivedFileSet);
        jarArchiver.addArchivedFileSet(archivedFileSet);
        archiver.setArchiver((JarArchiver) jarArchiver);
        File aotJar = new File(unmodifiedJar.getParentFile(), finalName + "-aot.jar");
        archiver.setOutputFile(aotJar);
    }

    /**
     * This method reads the resource-filter.txt file which is generated by the AOT analysis
     * and configures the archive to exclude the resources listed in that file
     * @param archivedFileSet the archive configuration
     * @throws MojoExecutionException in case the resource filter cannot be read
     */
    private void configureExcludes(DefaultArchivedFileSet archivedFileSet) throws MojoExecutionException {
        File excluded = outputFile("generated/logs/resource-filter.txt");
        if (excluded.exists()) {
            Set<String> excludes = new HashSet<>();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(excluded)))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    line = line.trim();
                    if (!line.isEmpty()) {
                        excludes.add(line);
                    }
                }
            } catch (IOException e) {
                throw new MojoExecutionException("Unable to read filter file", e);
            }
            if (!excludes.isEmpty()) {
                archivedFileSet.setExcludes(excludes.toArray(new String[0]));
            }
        }
    }

}
